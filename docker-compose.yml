version: '3.8'

services:
  db:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # Добавим проверку состояния, чтобы наше приложение стартовало только после того,
    # как база данных будет готова принимать соединения.
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Наш новый сервис!
  api:
    # 'build: .' говорит Docker Compose собрать образ из Dockerfile в текущей директории.
    build: .
    # Перезапускать при падении.
    restart: always
    # Передаем переменные из .env в наш контейнер. Они нужны для настроек.
    env_file:
      - .env
    # Пробрасываем порт 8000 внутри контейнера на порт 8000 на нашей машине.
    ports:
      - "8000:8000"
    # 'depends_on' гарантирует, что сервис 'api' будет запущен только ПОСЛЕ
    # того, как сервис 'db' достигнет состояния 'service_healthy' (пройдет healthcheck).
    depends_on:
      db:
        condition: service_healthy
    # Команда, которая будет выполнена ПЕРЕД запуском основной CMD из Dockerfile.
    # Мы используем ее, чтобы автоматически применять миграции при старте контейнера.
    command: bash -c "alembic upgrade head && uvicorn --host 0.0.0.0 --port 8000 src.main:app"


volumes:
  postgres_data: